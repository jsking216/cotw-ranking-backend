type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type Global {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  favicon: UploadFile
  siteName: String!
  defaultSeo: ComponentSharedSeo
}

input GlobalInput {
  favicon: ID
  siteName: String!
  defaultSeo: ComponentSharedSeoInput!
  created_by: ID
  updated_by: ID
}

input editGlobalInput {
  favicon: ID
  siteName: String
  defaultSeo: editComponentSharedSeoInput
  created_by: ID
  updated_by: ID
}

input updateGlobalInput {
  data: editGlobalInput
}

type updateGlobalPayload {
  global: Global
}

type deleteGlobalPayload {
  global: Global
}

type Homepage {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  seo: ComponentSharedSeo
  hero: ComponentSectionsHero
}

input HomepageInput {
  seo: ComponentSharedSeoInput
  hero: ComponentSectionsHeroInput!
  created_by: ID
  updated_by: ID
}

input editHomepageInput {
  seo: editComponentSharedSeoInput
  hero: editComponentSectionsHeroInput
  created_by: ID
  updated_by: ID
}

input updateHomepageInput {
  data: editHomepageInput
}

type updateHomepagePayload {
  homepage: Homepage
}

type deleteHomepagePayload {
  homepage: Homepage
}

type PodcastEpisodeReview {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  PodcastEpisodeReviewName: String
  OverallReviewRating: Float
  BeginningReviewRating: Float
  MiddleReviewRating: Float
  EndingReviewRating: Float
  HypeReviewRating: Float
  VarietyReviewRating: Float
  FunReviewRating: Float
  podcast_episode: PodcastEpisode
  PodcastEpisodeReviewDescription: String
  podcast: Podcast
  published_at: DateTime
}

type PodcastEpisodeReviewConnection {
  values: [PodcastEpisodeReview]
  groupBy: PodcastEpisodeReviewGroupBy
  aggregate: PodcastEpisodeReviewAggregator
}

type PodcastEpisodeReviewAggregator {
  count: Int
  totalCount: Int
  sum: PodcastEpisodeReviewAggregatorSum
  avg: PodcastEpisodeReviewAggregatorAvg
  min: PodcastEpisodeReviewAggregatorMin
  max: PodcastEpisodeReviewAggregatorMax
}

type PodcastEpisodeReviewAggregatorSum {
  OverallReviewRating: Float
  BeginningReviewRating: Float
  MiddleReviewRating: Float
  EndingReviewRating: Float
  HypeReviewRating: Float
  VarietyReviewRating: Float
  FunReviewRating: Float
}

type PodcastEpisodeReviewAggregatorAvg {
  OverallReviewRating: Float
  BeginningReviewRating: Float
  MiddleReviewRating: Float
  EndingReviewRating: Float
  HypeReviewRating: Float
  VarietyReviewRating: Float
  FunReviewRating: Float
}

type PodcastEpisodeReviewAggregatorMin {
  OverallReviewRating: Float
  BeginningReviewRating: Float
  MiddleReviewRating: Float
  EndingReviewRating: Float
  HypeReviewRating: Float
  VarietyReviewRating: Float
  FunReviewRating: Float
}

type PodcastEpisodeReviewAggregatorMax {
  OverallReviewRating: Float
  BeginningReviewRating: Float
  MiddleReviewRating: Float
  EndingReviewRating: Float
  HypeReviewRating: Float
  VarietyReviewRating: Float
  FunReviewRating: Float
}

type PodcastEpisodeReviewGroupBy {
  id: [PodcastEpisodeReviewConnectionId]
  created_at: [PodcastEpisodeReviewConnectionCreated_at]
  updated_at: [PodcastEpisodeReviewConnectionUpdated_at]
  PodcastEpisodeReviewName: [PodcastEpisodeReviewConnectionPodcastEpisodeReviewName]
  OverallReviewRating: [PodcastEpisodeReviewConnectionOverallReviewRating]
  BeginningReviewRating: [PodcastEpisodeReviewConnectionBeginningReviewRating]
  MiddleReviewRating: [PodcastEpisodeReviewConnectionMiddleReviewRating]
  EndingReviewRating: [PodcastEpisodeReviewConnectionEndingReviewRating]
  HypeReviewRating: [PodcastEpisodeReviewConnectionHypeReviewRating]
  VarietyReviewRating: [PodcastEpisodeReviewConnectionVarietyReviewRating]
  FunReviewRating: [PodcastEpisodeReviewConnectionFunReviewRating]
  podcast_episode: [PodcastEpisodeReviewConnectionPodcast_episode]
  PodcastEpisodeReviewDescription: [PodcastEpisodeReviewConnectionPodcastEpisodeReviewDescription]
  podcast: [PodcastEpisodeReviewConnectionPodcast]
  published_at: [PodcastEpisodeReviewConnectionPublished_at]
}

type PodcastEpisodeReviewConnectionId {
  key: ID
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionCreated_at {
  key: DateTime
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionUpdated_at {
  key: DateTime
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionPodcastEpisodeReviewName {
  key: String
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionOverallReviewRating {
  key: Float
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionBeginningReviewRating {
  key: Float
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionMiddleReviewRating {
  key: Float
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionEndingReviewRating {
  key: Float
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionHypeReviewRating {
  key: Float
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionVarietyReviewRating {
  key: Float
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionFunReviewRating {
  key: Float
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionPodcast_episode {
  key: ID
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionPodcastEpisodeReviewDescription {
  key: String
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionPodcast {
  key: ID
  connection: PodcastEpisodeReviewConnection
}

type PodcastEpisodeReviewConnectionPublished_at {
  key: DateTime
  connection: PodcastEpisodeReviewConnection
}

input PodcastEpisodeReviewInput {
  PodcastEpisodeReviewName: String
  OverallReviewRating: Float
  BeginningReviewRating: Float
  MiddleReviewRating: Float
  EndingReviewRating: Float
  HypeReviewRating: Float
  VarietyReviewRating: Float
  FunReviewRating: Float
  podcast_episode: ID
  PodcastEpisodeReviewDescription: String
  podcast: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPodcastEpisodeReviewInput {
  PodcastEpisodeReviewName: String
  OverallReviewRating: Float
  BeginningReviewRating: Float
  MiddleReviewRating: Float
  EndingReviewRating: Float
  HypeReviewRating: Float
  VarietyReviewRating: Float
  FunReviewRating: Float
  podcast_episode: ID
  PodcastEpisodeReviewDescription: String
  podcast: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPodcastEpisodeReviewInput {
  data: PodcastEpisodeReviewInput
}

type createPodcastEpisodeReviewPayload {
  podcastEpisodeReview: PodcastEpisodeReview
}

input updatePodcastEpisodeReviewInput {
  where: InputID
  data: editPodcastEpisodeReviewInput
}

type updatePodcastEpisodeReviewPayload {
  podcastEpisodeReview: PodcastEpisodeReview
}

input deletePodcastEpisodeReviewInput {
  where: InputID
}

type deletePodcastEpisodeReviewPayload {
  podcastEpisodeReview: PodcastEpisodeReview
}

type PodcastEpisode {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  PodcastEpisodeName: String
  podcast_episode_review: PodcastEpisodeReview
  podcast: Podcast
  published_at: DateTime
}

type PodcastEpisodeConnection {
  values: [PodcastEpisode]
  groupBy: PodcastEpisodeGroupBy
  aggregate: PodcastEpisodeAggregator
}

type PodcastEpisodeAggregator {
  count: Int
  totalCount: Int
}

type PodcastEpisodeGroupBy {
  id: [PodcastEpisodeConnectionId]
  created_at: [PodcastEpisodeConnectionCreated_at]
  updated_at: [PodcastEpisodeConnectionUpdated_at]
  PodcastEpisodeName: [PodcastEpisodeConnectionPodcastEpisodeName]
  podcast_episode_review: [PodcastEpisodeConnectionPodcast_episode_review]
  podcast: [PodcastEpisodeConnectionPodcast]
  published_at: [PodcastEpisodeConnectionPublished_at]
}

type PodcastEpisodeConnectionId {
  key: ID
  connection: PodcastEpisodeConnection
}

type PodcastEpisodeConnectionCreated_at {
  key: DateTime
  connection: PodcastEpisodeConnection
}

type PodcastEpisodeConnectionUpdated_at {
  key: DateTime
  connection: PodcastEpisodeConnection
}

type PodcastEpisodeConnectionPodcastEpisodeName {
  key: String
  connection: PodcastEpisodeConnection
}

type PodcastEpisodeConnectionPodcast_episode_review {
  key: ID
  connection: PodcastEpisodeConnection
}

type PodcastEpisodeConnectionPodcast {
  key: ID
  connection: PodcastEpisodeConnection
}

type PodcastEpisodeConnectionPublished_at {
  key: DateTime
  connection: PodcastEpisodeConnection
}

input PodcastEpisodeInput {
  PodcastEpisodeName: String
  podcast_episode_review: ID
  podcast: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPodcastEpisodeInput {
  PodcastEpisodeName: String
  podcast_episode_review: ID
  podcast: ID
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPodcastEpisodeInput {
  data: PodcastEpisodeInput
}

type createPodcastEpisodePayload {
  podcastEpisode: PodcastEpisode
}

input updatePodcastEpisodeInput {
  where: InputID
  data: editPodcastEpisodeInput
}

type updatePodcastEpisodePayload {
  podcastEpisode: PodcastEpisode
}

input deletePodcastEpisodeInput {
  where: InputID
}

type deletePodcastEpisodePayload {
  podcastEpisode: PodcastEpisode
}

type Podcast {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  PodcastName: String
  PodcastDescription: String
  PodcastUrl: String
  image: UploadFile
  published_at: DateTime
  podcast_episodes(sort: String, limit: Int, start: Int, where: JSON): [PodcastEpisode]
  podcast_episode_reviews(sort: String, limit: Int, start: Int, where: JSON): [PodcastEpisodeReview]
}

type PodcastConnection {
  values: [Podcast]
  groupBy: PodcastGroupBy
  aggregate: PodcastAggregator
}

type PodcastAggregator {
  count: Int
  totalCount: Int
}

type PodcastGroupBy {
  id: [PodcastConnectionId]
  created_at: [PodcastConnectionCreated_at]
  updated_at: [PodcastConnectionUpdated_at]
  PodcastName: [PodcastConnectionPodcastName]
  PodcastDescription: [PodcastConnectionPodcastDescription]
  PodcastUrl: [PodcastConnectionPodcastUrl]
  image: [PodcastConnectionImage]
  published_at: [PodcastConnectionPublished_at]
}

type PodcastConnectionId {
  key: ID
  connection: PodcastConnection
}

type PodcastConnectionCreated_at {
  key: DateTime
  connection: PodcastConnection
}

type PodcastConnectionUpdated_at {
  key: DateTime
  connection: PodcastConnection
}

type PodcastConnectionPodcastName {
  key: String
  connection: PodcastConnection
}

type PodcastConnectionPodcastDescription {
  key: String
  connection: PodcastConnection
}

type PodcastConnectionPodcastUrl {
  key: String
  connection: PodcastConnection
}

type PodcastConnectionImage {
  key: ID
  connection: PodcastConnection
}

type PodcastConnectionPublished_at {
  key: DateTime
  connection: PodcastConnection
}

input PodcastInput {
  PodcastName: String
  PodcastDescription: String
  PodcastUrl: String
  podcast_episodes: [ID]
  image: ID
  podcast_episode_reviews: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input editPodcastInput {
  PodcastName: String
  PodcastDescription: String
  PodcastUrl: String
  podcast_episodes: [ID]
  image: ID
  podcast_episode_reviews: [ID]
  published_at: DateTime
  created_by: ID
  updated_by: ID
}

input createPodcastInput {
  data: PodcastInput
}

type createPodcastPayload {
  podcast: Podcast
}

input updatePodcastInput {
  where: InputID
  data: editPodcastInput
}

type updatePodcastPayload {
  podcast: Podcast
}

input deletePodcastInput {
  where: InputID
}

type deletePodcastPayload {
  podcast: Podcast
}

type Writer {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  picture: UploadFile
  email: String
}

type WriterConnection {
  values: [Writer]
  groupBy: WriterGroupBy
  aggregate: WriterAggregator
}

type WriterAggregator {
  count: Int
  totalCount: Int
}

type WriterGroupBy {
  id: [WriterConnectionId]
  created_at: [WriterConnectionCreated_at]
  updated_at: [WriterConnectionUpdated_at]
  name: [WriterConnectionName]
  picture: [WriterConnectionPicture]
  email: [WriterConnectionEmail]
}

type WriterConnectionId {
  key: ID
  connection: WriterConnection
}

type WriterConnectionCreated_at {
  key: DateTime
  connection: WriterConnection
}

type WriterConnectionUpdated_at {
  key: DateTime
  connection: WriterConnection
}

type WriterConnectionName {
  key: String
  connection: WriterConnection
}

type WriterConnectionPicture {
  key: ID
  connection: WriterConnection
}

type WriterConnectionEmail {
  key: String
  connection: WriterConnection
}

input WriterInput {
  name: String
  picture: ID
  email: String
  created_by: ID
  updated_by: ID
}

input editWriterInput {
  name: String
  picture: ID
  email: String
  created_by: ID
  updated_by: ID
}

input createWriterInput {
  data: WriterInput
}

type createWriterPayload {
  writer: Writer
}

input updateWriterInput {
  where: InputID
  data: editWriterInput
}

type updateWriterPayload {
  writer: Writer
}

input deleteWriterInput {
  where: InputID
}

type deleteWriterPayload {
  writer: Writer
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type ComponentSectionsHero {
  id: ID!
  title: String!
}

input ComponentSectionsHeroInput {
  title: String!
}

input editComponentSectionsHeroInput {
  id: ID
  title: String
}

type ComponentSharedSeo {
  id: ID!
  metaTitle: String!
  metaDescription: String!
  shareImage: UploadFile
}

input ComponentSharedSeoInput {
  metaTitle: String!
  metaDescription: String!
  shareImage: ID
}

input editComponentSharedSeoInput {
  id: ID
  metaTitle: String
  metaDescription: String
  shareImage: ID
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Global | updateGlobalPayload | deleteGlobalPayload | Homepage | updateHomepagePayload | deleteHomepagePayload | PodcastEpisodeReview | PodcastEpisodeReviewConnection | PodcastEpisodeReviewAggregator | PodcastEpisodeReviewAggregatorSum | PodcastEpisodeReviewAggregatorAvg | PodcastEpisodeReviewAggregatorMin | PodcastEpisodeReviewAggregatorMax | PodcastEpisodeReviewGroupBy | PodcastEpisodeReviewConnectionId | PodcastEpisodeReviewConnectionCreated_at | PodcastEpisodeReviewConnectionUpdated_at | PodcastEpisodeReviewConnectionPodcastEpisodeReviewName | PodcastEpisodeReviewConnectionOverallReviewRating | PodcastEpisodeReviewConnectionBeginningReviewRating | PodcastEpisodeReviewConnectionMiddleReviewRating | PodcastEpisodeReviewConnectionEndingReviewRating | PodcastEpisodeReviewConnectionHypeReviewRating | PodcastEpisodeReviewConnectionVarietyReviewRating | PodcastEpisodeReviewConnectionFunReviewRating | PodcastEpisodeReviewConnectionPodcast_episode | PodcastEpisodeReviewConnectionPodcastEpisodeReviewDescription | PodcastEpisodeReviewConnectionPodcast | PodcastEpisodeReviewConnectionPublished_at | createPodcastEpisodeReviewPayload | updatePodcastEpisodeReviewPayload | deletePodcastEpisodeReviewPayload | PodcastEpisode | PodcastEpisodeConnection | PodcastEpisodeAggregator | PodcastEpisodeGroupBy | PodcastEpisodeConnectionId | PodcastEpisodeConnectionCreated_at | PodcastEpisodeConnectionUpdated_at | PodcastEpisodeConnectionPodcastEpisodeName | PodcastEpisodeConnectionPodcast_episode_review | PodcastEpisodeConnectionPodcast | PodcastEpisodeConnectionPublished_at | createPodcastEpisodePayload | updatePodcastEpisodePayload | deletePodcastEpisodePayload | Podcast | PodcastConnection | PodcastAggregator | PodcastGroupBy | PodcastConnectionId | PodcastConnectionCreated_at | PodcastConnectionUpdated_at | PodcastConnectionPodcastName | PodcastConnectionPodcastDescription | PodcastConnectionPodcastUrl | PodcastConnectionImage | PodcastConnectionPublished_at | createPodcastPayload | updatePodcastPayload | deletePodcastPayload | Writer | WriterConnection | WriterAggregator | WriterGroupBy | WriterConnectionId | WriterConnectionCreated_at | WriterConnectionUpdated_at | WriterConnectionName | WriterConnectionPicture | WriterConnectionEmail | createWriterPayload | updateWriterPayload | deleteWriterPayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | ComponentSectionsHero | ComponentSharedSeo

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  global(publicationState: PublicationState): Global
  homepage(publicationState: PublicationState): Homepage
  podcastEpisodeReview(id: ID!, publicationState: PublicationState): PodcastEpisodeReview
  podcastEpisodeReviews(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [PodcastEpisodeReview]
  podcastEpisodeReviewsConnection(sort: String, limit: Int, start: Int, where: JSON): PodcastEpisodeReviewConnection
  podcastEpisode(id: ID!, publicationState: PublicationState): PodcastEpisode
  podcastEpisodes(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [PodcastEpisode]
  podcastEpisodesConnection(sort: String, limit: Int, start: Int, where: JSON): PodcastEpisodeConnection
  podcast(id: ID!, publicationState: PublicationState): Podcast
  podcasts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Podcast]
  podcastsConnection(sort: String, limit: Int, start: Int, where: JSON): PodcastConnection
  writer(id: ID!, publicationState: PublicationState): Writer
  writers(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Writer]
  writersConnection(sort: String, limit: Int, start: Int, where: JSON): WriterConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  me: UsersPermissionsMe
}

type Mutation {
  updateGlobal(input: updateGlobalInput): updateGlobalPayload
  deleteGlobal: deleteGlobalPayload
  updateHomepage(input: updateHomepageInput): updateHomepagePayload
  deleteHomepage: deleteHomepagePayload
  createPodcastEpisodeReview(input: createPodcastEpisodeReviewInput): createPodcastEpisodeReviewPayload
  updatePodcastEpisodeReview(input: updatePodcastEpisodeReviewInput): updatePodcastEpisodeReviewPayload
  deletePodcastEpisodeReview(input: deletePodcastEpisodeReviewInput): deletePodcastEpisodeReviewPayload
  createPodcastEpisode(input: createPodcastEpisodeInput): createPodcastEpisodePayload
  updatePodcastEpisode(input: updatePodcastEpisodeInput): updatePodcastEpisodePayload
  deletePodcastEpisode(input: deletePodcastEpisodeInput): deletePodcastEpisodePayload
  createPodcast(input: createPodcastInput): createPodcastPayload
  updatePodcast(input: updatePodcastInput): updatePodcastPayload
  deletePodcast(input: deletePodcastInput): deletePodcastPayload
  createWriter(input: createWriterInput): createWriterPayload
  updateWriter(input: updateWriterInput): updateWriterPayload
  deleteWriter(input: deleteWriterInput): deleteWriterPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  upload(refId: ID, ref: String, field: String, source: String, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
